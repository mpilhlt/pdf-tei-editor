#!/bin/bash

# End-to-End Test Runner
# Orchestrates containerized application and Playwright tests

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Generate unique test run ID for container isolation
TEST_RUN_ID="test-$(date +%s)-$$"
export TEST_RUN_ID

# Cleanup function
cleanup() {
    log_info "Cleaning up test environment..."

    if [ "$USE_PODMAN" = "true" ] && [ -n "$CONTAINER_CMD" ]; then
        # Direct podman cleanup - clean up any containers using port 8000
        EXISTING_CONTAINERS=$($CONTAINER_CMD ps -a --format "table {{.ID}}\t{{.Ports}}" | grep ":8000->" | awk '{print $1}' 2>/dev/null || true)
        if [ -n "$EXISTING_CONTAINERS" ]; then
            log_info "Stopping all containers using port 8000..."
            echo "$EXISTING_CONTAINERS" | xargs -r $CONTAINER_CMD stop 2>/dev/null || true
            echo "$EXISTING_CONTAINERS" | xargs -r $CONTAINER_CMD rm 2>/dev/null || true
        fi

        # Clean up specific test container
        $CONTAINER_CMD stop "pdf-tei-editor-test-${TEST_RUN_ID}" 2>/dev/null || true
        $CONTAINER_CMD rm -f "pdf-tei-editor-test-${TEST_RUN_ID}" 2>/dev/null || true
        $CONTAINER_CMD rmi -f "pdf-tei-editor-test:${TEST_RUN_ID}" 2>/dev/null || true
    elif [ -n "$COMPOSE_CMD" ]; then
        # Compose cleanup
        $COMPOSE_CMD -f docker-compose.test.yml down --remove-orphans --volumes 2>/dev/null || true
    fi

    log_info "Cleanup completed"
}

# Set up cleanup on exit
trap cleanup EXIT

# Parse command line arguments
BROWSER="chromium"
HEADED=""
DEBUG=""
TEST_FILTER=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --browser)
            BROWSER="$2"
            shift 2
            ;;
        --headed)
            HEADED="--headed"
            shift
            ;;
        --debug)
            DEBUG="--debug"
            shift
            ;;
        --grep)
            TEST_FILTER="--grep $2"
            shift 2
            ;;
        --help)
            echo "End-to-End Test Runner"
            echo ""
            echo "Usage: $0 [options]"
            echo ""
            echo "Options:"
            echo "  --browser <name>   Browser to use (chromium|firefox|webkit) [default: chromium]"
            echo "  --headed           Run tests in headed mode (show browser)"
            echo "  --debug            Enable debug mode"
            echo "  --grep <pattern>   Run tests matching pattern"
            echo "  --help             Show this help message"
            echo ""
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            exit 1
            ;;
    esac
done

log_info "PDF TEI Editor - End-to-End Tests"
log_info "================================="
log_info "Test Run ID: $TEST_RUN_ID"
log_info "Browser: $BROWSER"
log_info "Mode: $([ -n "$HEADED" ] && echo "headed" || echo "headless")"

# Check dependencies
log_info "Checking dependencies..."

# Detect container tool (podman or docker)
if command -v podman &> /dev/null; then
    CONTAINER_CMD="podman"
    USE_PODMAN=true
    log_info "Using podman as container tool"

    # For podman, we'll run containers directly instead of using compose
    if command -v podman-compose &> /dev/null; then
        COMPOSE_CMD="podman-compose"
        USE_PODMAN=false
    elif command -v docker-compose &> /dev/null; then
        COMPOSE_CMD="docker-compose"
        USE_PODMAN=false
    else
        log_info "No compose tool found, using direct podman commands"
    fi
elif command -v docker &> /dev/null; then
    CONTAINER_CMD="docker"
    USE_PODMAN=false
    if command -v docker compose &> /dev/null; then
        COMPOSE_CMD="docker compose"
    elif command -v docker-compose &> /dev/null; then
        COMPOSE_CMD="docker-compose"
    else
        log_error "Docker Compose is required but not installed"
        exit 1
    fi
    log_info "Using docker as container tool"
else
    log_error "Neither podman nor docker found. Please install one of them."
    exit 1
fi

if ! command -v npx &> /dev/null; then
    log_error "Node.js/npm is required but not installed"
    exit 1
fi

log_success "All dependencies found"

# Build and start test environment
log_info "Building and starting test environment..."

start_test_environment() {
    if [ "$USE_PODMAN" = "true" ]; then
        # Direct podman approach
        log_info "Using direct podman commands..."

        # Clean up any existing containers using port 8000
        log_info "Cleaning up existing containers on port 8000..."
        EXISTING_CONTAINERS=$($CONTAINER_CMD ps -a --format "table {{.ID}}\t{{.Ports}}" | grep ":8000->" | awk '{print $1}' || true)
        if [ -n "$EXISTING_CONTAINERS" ]; then
            log_info "Stopping containers using port 8000..."
            echo "$EXISTING_CONTAINERS" | xargs -r $CONTAINER_CMD stop 2>/dev/null || true
            echo "$EXISTING_CONTAINERS" | xargs -r $CONTAINER_CMD rm 2>/dev/null || true
        fi

        # Clean up existing container with our name
        $CONTAINER_CMD rm -f "pdf-tei-editor-test-${TEST_RUN_ID}" 2>/dev/null || true

        # Build image
        log_info "Building test image..."
        if ! $CONTAINER_CMD build -t "pdf-tei-editor-test:${TEST_RUN_ID}" --target test .; then
            log_error "Failed to build test image"
            return 1
        fi

        # Start container
        log_info "Starting test container..."
        if ! $CONTAINER_CMD run -d \
            --name "pdf-tei-editor-test-${TEST_RUN_ID}" \
            -p 8000:8000 \
            --env FLASK_ENV=testing \
            --env PYTHONPATH=/app \
            "pdf-tei-editor-test:${TEST_RUN_ID}"; then
            log_error "Failed to start test container"
            return 1
        fi
    else
        # Compose approach
        log_info "Using compose commands..."

        # Clean up any existing containers
        $COMPOSE_CMD -f docker-compose.test.yml down --remove-orphans --volumes 2>/dev/null || true

        # Start the test environment
        if ! $COMPOSE_CMD -f docker-compose.test.yml up --build -d; then
            log_error "Failed to start test environment"
            return 1
        fi
    fi

    return 0
}

if start_test_environment; then
    log_success "Test environment started"
else
    exit 1
fi

# Wait for application to be healthy
log_info "Waiting for application to be ready..."
TIMEOUT=120
COUNTER=0

while [ $COUNTER -lt $TIMEOUT ]; do
    if [ "$USE_PODMAN" = "true" ]; then
        # Check if container is running and responding
        if $CONTAINER_CMD exec "pdf-tei-editor-test-${TEST_RUN_ID}" curl -f http://localhost:8000/ >/dev/null 2>&1; then
            log_success "Application is ready"
            break
        fi
    else
        # Use compose health check
        if $COMPOSE_CMD -f docker-compose.test.yml ps | grep -q "healthy"; then
            log_success "Application is ready"
            break
        fi
    fi

    if [ $COUNTER -eq 60 ]; then
        log_warning "Application is taking longer than expected to start..."
    fi

    sleep 1
    COUNTER=$((COUNTER + 1))
done

if [ $COUNTER -ge $TIMEOUT ]; then
    log_error "Application failed to start within ${TIMEOUT} seconds"
    log_info "Container logs:"
    if [ "$USE_PODMAN" = "true" ]; then
        $CONTAINER_CMD logs "pdf-tei-editor-test-${TEST_RUN_ID}"
    else
        $COMPOSE_CMD -f docker-compose.test.yml logs
    fi
    exit 1
fi

# Run Playwright tests
log_info "Running Playwright tests..."

PLAYWRIGHT_CMD="npx playwright test"
if [ -n "$HEADED" ]; then
    PLAYWRIGHT_CMD="$PLAYWRIGHT_CMD --headed"
fi
if [ -n "$DEBUG" ]; then
    PLAYWRIGHT_CMD="$PLAYWRIGHT_CMD --debug"
fi
if [ -n "$TEST_FILTER" ]; then
    PLAYWRIGHT_CMD="$PLAYWRIGHT_CMD $TEST_FILTER"
fi

# Set project to run specific browser
PLAYWRIGHT_CMD="$PLAYWRIGHT_CMD --project=$BROWSER"

log_info "Executing: $PLAYWRIGHT_CMD"

if $PLAYWRIGHT_CMD; then
    log_success "All tests passed!"
    exit 0
else
    log_error "Some tests failed"

    # Show container logs for debugging
    log_info "Application logs for debugging:"
    if [ "$USE_PODMAN" = "true" ]; then
        $CONTAINER_CMD logs --tail=50 "pdf-tei-editor-test-${TEST_RUN_ID}"
    else
        $COMPOSE_CMD -f docker-compose.test.yml logs --tail=50
    fi

    exit 1
fi