#!/usr/bin/env python3

# CLI for running the Flask server in development mode.

import os, sys
from glob import glob
from pathlib import Path

project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from server.flask_app import app

if __name__ == '__main__':
    # host and port default to localhost:3001 unless overridden by CLI arguments
    host = sys.argv[1] if len(sys.argv) > 1 else "localhost"
    port = int(sys.argv[2]) if len(sys.argv) > 2 else 3001
    
    # Set up logging to file while keeping console output
    log_dir = project_root / "log"
    log_dir.mkdir(exist_ok=True)  # Create log directory if it doesn't exist
    log_file = log_dir / "server.log"
    
    # Create a custom print function that writes to both console and file
    original_stdout = sys.stdout
    original_stderr = sys.stderr
    
    class TeeOutput:
        def __init__(self, *files):
            self.files = files
        def write(self, obj):
            for f in self.files:
                f.write(obj)
                f.flush()
        def flush(self):
            for f in self.files:
                f.flush()
    
    # Open log file and redirect both stdout and stderr
    with open(log_file, 'w', buffering=1) as log_f:
        sys.stdout = TeeOutput(original_stdout, log_f)
        sys.stderr = TeeOutput(original_stderr, log_f)
        
        # start the server
        # Only watch Python files in server/api and server/lib directories
        reload_extra_files = []
        for _dir in ['api', 'lib']:
            for py_file in (project_root / 'server' / _dir).rglob('*.py'):
                reload_extra_files.append(str(py_file))
        
        # Also need to watch the main flask_app.py file
        reload_extra_files.append(str(project_root / 'server' / 'flask_app.py'))
        print()
        print("====================================================================================")
        print(f"Starting development server, load http://{host}:{port}/index.html?dev to start in source mode")
        print(f"To use the build version, run npm build and load http://{host}:{port}")
        print(f"Server output being logged to: {log_file}")
        print("====================================================================================")
        print()
        
        try:
            app.run(host=host, 
                    port=port, 
                    debug=True, 
                    load_dotenv=True, 
                    threaded=True,
                    extra_files=reload_extra_files)
        finally:
            # Restore original stdout/stderr
            sys.stdout = original_stdout
            sys.stderr = original_stderr
   
